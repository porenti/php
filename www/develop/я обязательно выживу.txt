

6. Отсих уже идет разработка, нужно создать простейший крад. В Laravel основные файлы располагаются в директориях:
Контроллеры: App/Http/Controllers
Модели: App/Models
Конфиги: configs
Миграции: /database/migrations
Шаблоны blade: /resources/views
Скрипты: /resources/js
Стили: /resources/scss
Маршруты: /routes/ (web.php - приложение, api.php - апи)
В папке с миграциями увидишь миграцию на пользователей, сделай там, вместо name - f_name, m_name, l_name и добавь еще каких-нибудь любых полей, просто для заполнения
Чтобы миграции выполнились: php artisan migrate
Модель пользлователя, скорее всего уже будет создана у тебя, если нет, то: php artisan make:model Users/User
Создастся папка Users и там будет модель
Чтобы создать контроллер: php artisan make:controller Users/UserController
Из контроллера возвращать страницу: return view('template.path.name')
Делать редирект: return redirect()->rout('route.name')
В web.php можешь использовать Route::resource('name',Controller::class);
Тогда лара сама сделает основные крадовские маршруты
Итого тебе нужно, чтобы (в скобках методы):
по index выводился список пользователей(GET),
по create выводилась форма создания(GET),
по store проходило создание пользователя(POST)
по edit выводилась форма редактирования(GET)
по update проходило редактирование(PATCH)
по delete происходило удаление(DELETE)

php artisan make:controller UsersController --resource --model=User
php artisan route:list //посмотреть пути
php artisan db:seed   //заполнить бд
{UserFactory.php and DatabaseSeeder}


Смотри, в index у тебя идет получение всех сущностей, никогда так не делаем, всегда есть какие-то ограничения на уровне базы данных, и даже если тебе нужны действительно все пользователи, нужно использовать пагинацию
$users = Users::paginate(25);
Тогда у тебя вместо полумиллиона пользователей придет 25, с возможностью посмотреть их все порционно, и страница не выдаст оишбку 500 из-за нехватки памяти)
Для выполнения каких-то скриптом пагинация не нужна, только для вывода
Ознакомся с пагинацией в ларавель, ее также нужно внедрять на страницах (Есть специальная функция для этого, она сама все делает за тебя)

Метод store и update
При post, patch запросах, когда ты что-то передаешь в запросе, обязательно делаем валидацию данных
Можно создать отдельный компонент (RuleRequest), а можно использовать $request->validate().
Также желательно не использовать статические create и update у моделей, мы используем сеттеры
$frd = $request->only();
$user = new User();
$user->setNickName($frd['nickname']);
$user->save();

///// ОПЯТЬ ИЗ-ЗА ГИТХАБА ПРАВА СЛЕТЕЛИ
sudo chown -R www-data:www-data /var/www

На страницах не обращаемся напрямую к аттрибутам, используем геттеры ($user->getNickname()), чтобы были подсказки phpstorm - наверху страницы сделай <?php /** @var namespace/User $user */ ?>

В php забудь про "", они ищут внутри себя переменные и из-за этого работают медленне, чем '', используем их, только если они нужны в самом тексте ('Компания "Аэрофлот"')
//искать исправлять не стал, просто не буду так больше ставить
af

Ознакомся https://laravel.com/docs/9.x/eloquent#query-scopes
Сделай локальный scope и примени на странице, к примеру:
User::filter($frd)->paginate();
----
public function scopeFilter(array $frd):Builder

Реализуй поиск по пользователям: по ФИО, возрасту и гендеру
Подсказка:
frd нужно передавать на страницу
На странице у тебя должны быть поля для ввода и кнопка внутри формы, у которой ссылка - та же самая
Для поиска по ФИО 1 полем, используй php функцию explode и orWhere в Eloquent
Если нужно подетальнее - спрашивай


Далее:
Мелочь - убери полные названия имен (l_name, f_name, m_name), полные только место лишнее занимают
Нормализуй данные по гендеру (создай отдельную таблицу, у пользователя у укажи foreign key)
Размер колонки вторичного и первичного ключа должны совпадать, можно unsignedTinyInteger
Gender
-id
-name
-short_name

https://laravel.com/docs/9.x/eloquent-relationships
Реализуй связь belongsTo от пользователя к гендеру, и ознакомся с остальными
Сделай геттер getAge

На пользователя добавть softDelete
Тут ничего сложного, просто колонка с датой удаления, вместо полного удаления из базы, нужно для целостности данных, но везде пихать не стоит)

Далее тебе нужно реализовать точно такой же крад на роли (можно не связывать с Permission)
Добавить парочку
Сделать возможность добавлять роли пользователям, реализация уже полностью на тебе
Сделать где-нибудь проверку на роль (например, чтобы пользователи без роли Администратор не могли добавлять пользователей)

Там ты столкнешься с Morph связью в таблице roles
Суть морф связи - связь  с сущностями из разных таблиц по их классу php, ларавель сама додумает что нужно вернуть

А еще у тебя 2 UsersController, избавься от одного из них
И назвать нужно UserController, чуть позже скину правила наименования файлов в laravel

Проектик немного попозже подниму
